/* Generated By:JavaCC: Do not edit this line. PrismParser.java */
package parser;

import jltl2ba.SimpleLTL;
import parser.ast.Command;
import parser.ast.ConstantList;
import parser.ast.Declaration;
import parser.ast.DeclarationBool;
import parser.ast.DeclarationClock;
import parser.ast.DeclarationInt;
import parser.ast.DeclarationIntUnbounded;
import parser.ast.DeclarationType;
import parser.ast.Expression;
import parser.ast.ExpressionBinaryOp;
import parser.ast.ExpressionExists;
import parser.ast.ExpressionFilter;
import parser.ast.ExpressionForAll;
import parser.ast.ExpressionFunc;
import parser.ast.ExpressionITE;
import parser.ast.ExpressionIdent;
import parser.ast.ExpressionLabel;
import parser.ast.ExpressionLiteral;
import parser.ast.ExpressionProb;
import parser.ast.ExpressionReward;
import parser.ast.ExpressionSS;
import parser.ast.ExpressionStrategy;
import parser.ast.ExpressionTemporal;
import parser.ast.ExpressionUnaryOp;
import parser.ast.ExpressionVar;
import parser.ast.Filter;
import parser.ast.ForLoop;
import parser.ast.FormulaList;
import parser.ast.LabelList;
import parser.ast.Module;
import parser.ast.ModulesFile;
import parser.ast.PropertiesFile;
import parser.ast.Property;
import parser.ast.RenamedModule;
import parser.ast.RewardStruct;
import parser.ast.RewardStructItem;
import parser.ast.SystemBrackets;
import parser.ast.SystemDefn;
import parser.ast.SystemFullParallel;
import parser.ast.SystemHide;
import parser.ast.SystemInterleaved;
import parser.ast.SystemModule;
import parser.ast.SystemParallel;
import parser.ast.SystemReference;
import parser.ast.SystemRename;
import parser.ast.Update;
import parser.ast.Updates;
import parser.type.Type;
import parser.type.TypeBool;
import parser.type.TypeDouble;
import parser.type.TypeInt;
import parser.visitor.ASTTraverseModify;
import prism.ModelInfo;
import prism.ModelType;
import prism.PrismLangException;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({"all"})
public class PrismParser implements PrismParserConstants {
        // The model associated with the properties file being parsed
        private static ModelInfo modelInfo;

        // List of keyword strings
        private static ArrayList<String> keywordList = new ArrayList<String>();
        static {
                keywordList.clear();
                for (int i = PrismParserConstants.COMMENT+1; i < PrismParserConstants.NOT; i++) {
                        String backslash = String.valueOf('"');
                        keywordList.add(PrismParserConstants.tokenImage[i].replaceAll(backslash, ""));
                }
        }

        //-----------------------------------------------------------------------------------
        // Main method for testing purposes
        //-----------------------------------------------------------------------------------

        public static void main(String[] args)
        {
                PrismParser p = null;
                InputStream str = null;
                String src = null;

                try {
                        if (args.length == 0) {
                                System.out.println("Usage: java parser.PrismParser <switch> [<file>]");
                                System.out.println("Where: <switch> = -modulesfile or -mf");
                                System.out.println("                  -propertiesfile or -pf");
                                System.out.println("                  -expression or -e");
                                System.out.println("                  -ltl or -l");
                                System.exit(1);
                        }

                        p = new PrismParser();
                        str = (args.length > 1) ? new FileInputStream(args[1]) : System.in;
                        src = (args.length > 1) ? "file "+args[1] : "stdin";
                        System.out.println("Reading from "+src+"...\u005cn");

                        if (args[0].equals("-modulesfile") || args[0].equals("-mf")) {
                                ModulesFile mf = p.parseModulesFile(str);
                                System.out.print("Modules file:\u005cn=============\u005cn\u005cn" + mf);
                                System.out.print("\u005cnTree:\u005cn=====\u005cn" + mf.toTreeString());
                                mf.tidyUp();
                                System.out.print("\u005cnAnd after expansion:\u005cn====================\u005cn\u005cn" +mf);
                        }
                        else if (args[0].equals("-propertiesfile") || args[0].equals("-pf")) {
                                PropertiesFile pf = p.parsePropertiesFile(new ModulesFile(), str);
                                System.out.print("Properties file:\u005cn================\u005cn\u005cn" + pf);
                                System.out.print("\u005cnTree:\u005cn=====\u005cn" + pf.toTreeString());
                                pf.tidyUp();
                                System.out.print("\u005cnAnd after expansion:\u005cn====================\u005cn\u005cn" + pf);
                        }
                        else if (args[0].equals("-expression") || args[0].equals("-e")) {
                                Expression expr = p.parseSingleExpression(str);
                                System.out.println("Expression: " + expr.toString());
                                System.out.print("Tree:\u005cn=====\u005cn" + expr.toTreeString());
                                expr.typeCheck();
                                expr.semanticCheck();
                                System.out.println("Type: " + expr.getType().getTypeString());
                                System.out.println("Eval: " + expr.evaluate());
                        }
                        else if (args[0].equals("-ltl") || args[0].equals("-l")) {
                                Expression expr = p.parseSingleLTLFormula(str);
                                expr = (Expression) expr.accept(new ASTTraverseModify() {
                                        public Object visit(ExpressionIdent e) throws PrismLangException
                                        {
                                                return new parser.ast.ExpressionVar(e.getName(), TypeBool.getInstance());
                                        }
                                });
                                System.out.println("LTL formula: " + expr.toString());
                                System.out.print("Tree:\u005cn=====\u005cn" + expr.toTreeString());
                                expr.typeCheck();
                                //expr.semanticCheck();
                                System.out.println("Type: " + expr.getType().getTypeString());
                                boolean pnf = Expression.isPositiveNormalFormLTL(expr);
                                System.out.println("Positive normal form: " + pnf);
                                System.out.println("Syntactically co-safe: " + Expression.isCoSafeLTLSyntactic(expr));
                                if (!pnf) {
                                        Expression exprPnf = BooleanUtils.convertLTLToPositiveNormalForm(expr.deepCopy());
                                        System.out.println("Positive normal form conversion: " + exprPnf);
                                        System.out.println("Syntactically co-safe: " + Expression.isCoSafeLTLSyntactic(exprPnf));
                                }
                                Expression expr2 = (Expression) expr.deepCopy().accept(new ASTTraverseModify() {
                                        public Object visit(ExpressionVar e) throws PrismLangException
                                        {
                                                        return new parser.ast.ExpressionLabel(e.getName());
                                        }
                                });
                                SimpleLTL sltl = expr2.convertForJltl2ba();
                                System.out.println("LBT: " + sltl.toStringLBT());
                                System.out.println("Spot: " + sltl.toStringSpot());
                                System.out.println("Spin: " + sltl.toStringSpin());
                        } else {
                                System.out.println("Unknown switch"); System.exit(1);
                        }
                }
                catch (PrismLangException e) {
                        System.out.println("Error in "+src+": " + e.getMessage()+"."); System.exit(1);
                }
                catch (FileNotFoundException e) {
                        System.out.println(e); System.exit(1);
                }
        }

        //-----------------------------------------------------------------------------------
        // Methods called by Prism
        //-----------------------------------------------------------------------------------

        // Constructor

        public PrismParser()
        {
                // Call default constructor
                this(System.in);
        }

        // Parse modules file

        public ModulesFile parseModulesFile(InputStream str) throws PrismLangException { return parseModulesFile(str, null); }

        public ModulesFile parseModulesFile(InputStream str, ModelType typeOverride) throws PrismLangException
        {
                ModulesFile mf = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        mf = ModulesFile();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                // Override type of model if requested
                if (typeOverride != null) {
                        mf.setModelType(typeOverride);
                }

                return mf;
        }

        // Parse properties file (pass ModulesFile in to get at its constants)

        public PropertiesFile parsePropertiesFile(ModelInfo modelInfo, InputStream str) throws PrismLangException
        { return parsePropertiesFile(modelInfo, str, false); }

        public PropertiesFile parsePropertiesFile(ModelInfo modelInfo, InputStream str, boolean strict) throws PrismLangException
        {
                PropertiesFile pf = null;

                // (Re)start parser
                ReInit(str);
                this.modelInfo = modelInfo;
                // Parse
                try {
                        pf = strict ? PropertiesFile() : PropertiesFileSemicolonless();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }

                return pf;
        }

        // Parse a single expression

        public Expression parseSingleExpression(InputStream str) throws PrismLangException
        {
                Expression expr = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        expr = SingleExpression();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return expr;
        }

        // Parse a single LTL formula

        public Expression parseSingleLTLFormula(InputStream str) throws PrismLangException
        {
                Expression expr = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        expr = SingleLTLFormula();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return expr;
        }

        // Parse a for loop

        public ForLoop parseForLoop(InputStream str) throws PrismLangException
        {
                ForLoop fl = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        fl = ForLoop();
                }
                catch (ParseException e) {
                        throw generateSyntaxError(e);
                }
                return fl;
        }

        //-----------------------------------------------------------------------------------
        // Some utility methods
        //-----------------------------------------------------------------------------------

        /**
	 * Get comment block directly preceding a token and remove "//" characters
	 */
        public static String getPrecedingCommentBlock(Token firstToken)
        {
                String comment = "", s;
                Token t = firstToken;

                // extract any comment from the previous lines of the file
                if (t.specialToken != null && !(t.specialToken.kind == PrismParserConstants.WHITESPACE && t.specialToken.image.matches("[\u005c\u005cn\u005c\u005cr]*"))) {
                        // trace back thru special tokens that are comments
                        t = t.specialToken;
                        while (t.specialToken != null && !(t.specialToken.kind == PrismParserConstants.WHITESPACE && t.specialToken.image.matches("[\u005c\u005cn\u005c\u005cr]*")))
                                t = t.specialToken;
                        // concatenate comment special tokens
                        while (t != null) {
                                s = t.image;
                                // strip any nasty carriage returns
                                s = s.replaceAll("\u005cr", "");
                                // remove "//" and preceding/subsequent spaces/tabs from comments
                                if (t.kind == PrismParserConstants.COMMENT) {
                                        while (comment.length() > 0 && (""+comment.charAt(comment.length()-1)).matches("[ \t]"))
                                                comment = comment.substring(0,comment.length()-1);
                                        s = s.substring(2);
                                        s = s.replaceFirst("[ \t]*", "");
                                }
                                comment += s;
                                t = t.next;
                        }
                }
                // remove final new line (if present)
                if (comment.length() > 0 && (comment.charAt(comment.length()-1) == '\n'))
                        comment = comment.substring(0,comment.length()-1);

                return comment;
        }

        // Add "//"s into comment block

        public static String slashCommentBlock(String comment)
        {
                int i;
                String s, res = "";
                // break into lines
                while ((i = comment.indexOf("\u005cn")) != -1) {
                        s = comment.substring(0, i);
                        comment = comment.substring(i+1);
                        // add "//" to non-empty lines
                        if (s.trim().length()>0) res += "// " + s;
                        res += "\u005cn";
                }
                // deal with any trailing characters (with no new line ending them)
                if (comment.trim().length()>0) res += "// " + comment + "\u005cn";
                return res;
        }

        /**
	 * Test a string to see if it is a PRISM language keyword.
	 */
        public static boolean isKeyword(String s)
        {
                return keywordList.contains(s);
        }

        /**
	 * Get access to the list of all PRISM language keywords.
	 */
        public static List<String> getListOfKeywords()
        {
                return keywordList;
        }

        /**
	 * Set the tab size used by the lexer/parser.
	 */
        public void setTabSize(int size)
        {
                SimpleCharStream.setTabSize(size);
        }

        /**
	 * Get the tab size used by the lexer/parser.
	 */
        public int getTabSize()
        {
                return SimpleCharStream.tabSize;
        }

        /**
	 * Generate a syntax error (PrismLangException) from a ParseException.
	 */
        protected PrismLangException generateSyntaxError(ParseException e)
        {
                if (e == null) return new PrismLangException("Syntax error");
                // No token: was prob created manually so use message if present
                if (e.currentToken == null) {
                        String msg = e.getMessage();
                        String exMsg = "Syntax error";
                        if (msg != null && msg.length() > 0)
                                exMsg += ": " + msg;
                        return new PrismLangException(exMsg);
                }
                // Use current/next token to find location of error
                // But don't use error message if too long (esp if generated by JavaCC)
                else {
                        ExpressionIdent tmp;
                        if (e.currentToken.next == null) {
                                tmp = new ExpressionIdent(e.currentToken.image);
                                tmp.setPosition(e.currentToken);
                        } else {
                                tmp = new ExpressionIdent(e.currentToken.next.image);
                                tmp.setPosition(e.currentToken.next);
                        }
                        String msg = e.getMessage();
                        String exMsg = "Syntax error";
                        if (msg != null && msg.length() > 0 && msg.length() < 20)
                                exMsg += ": " + msg;
                        return new PrismLangException(exMsg, tmp);
                }
        }

        //-----------------------------------------------------------------------------------
        // A few classes for temporary storage of bits of the AST
        //-----------------------------------------------------------------------------------

        static class ExpressionPair { public Expression expr1 = null; public Expression expr2 = null; }

//-----------------------------------------------------------------------------------
// Top-level productions
//-----------------------------------------------------------------------------------

// Modules file
  static final public ModulesFile ModulesFile() throws ParseException, PrismLangException {
        ModelType type = ModelType.MDP;
        int typeCount = 0;
        Token typeDupe = null;
        Declaration global;
        Module m = null;
        RenamedModule rm = null;
        RewardStruct rs = null;
        Expression init = null;
        int initCount = 0;
        Expression initDupe = null;
        ModulesFile mf = new ModulesFile();
        Token begin = null;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_2(3)) {
            begin = getToken(1);
        type = ModulesFileType();
                                   typeCount++; if (typeCount == 2) typeDupe = getToken(0);
      } else if (jj_2_3(3)) {
        FormulaDef(mf.getFormulaList());
      } else if (jj_2_4(3)) {
        LabelDef(mf.getLabelList());
      } else if (jj_2_5(3)) {
        ConstantDef(mf.getConstantList());
      } else if (jj_2_6(3)) {
        // Global variable
                global = GlobalDecl();
                                mf.addGlobal(global);
      } else if (jj_2_7(2147483647)) {
        rm = RenamedModule();
                                                                     mf.addRenamedModule(rm);
      } else if (jj_2_8(3)) {
        // Module
                m = Module();
                       mf.addModule(m);
      } else if (jj_2_9(3)) {
        // Reward structure
                rs = RewardStruct();
                              mf.addRewardStruct(rs);
      } else if (jj_2_10(3)) {
        // Initial states ("init...endinit" construct)
                init = Init();
                        mf.setInitialStates(init); initCount++; if (initCount == 2) initDupe = init;
      } else if (jj_2_11(3)) {
        SystemEndsystem(mf);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                // Check for multiple instances of some items
                if (typeDupe != null) {
                        ExpressionIdent tmp = new ExpressionIdent(typeDupe.image);
                        tmp.setPosition(typeDupe);
                        {if (true) throw new PrismLangException("There were multiple model type declarations", tmp);}
                }
                if (initDupe != null) {
                        {if (true) throw new PrismLangException("There were multiple init...endinit constructs", initDupe);}
                }

                // Set model type (note default is MDP)
                mf.setModelType(type);

                // Return completed ModulesFile object
                mf.setPosition(begin != null? begin: getToken(0), getToken(0));
                {if (true) return mf;}
    throw new Error("Missing return statement in function");
  }

// Properties file
  static final public PropertiesFile PropertiesFile() throws ParseException, PrismLangException {
        PropertiesFile pf = new PropertiesFile(modelInfo);
        Property prop;
        Token begin = null;
          begin = getToken(1);
    label_2:
    while (true) {
      if (jj_2_12(3)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_14(3)) {
        prop = Property();
                                      pf.addProperty(prop);
        label_3:
        while (true) {
          jj_consume_token(SEMICOLON);
          if (jj_2_13(3)) {
            ;
          } else {
            break label_3;
          }
        }
      } else if (jj_2_15(3)) {
        LabelDef(pf.getLabelList());
      } else if (jj_2_16(3)) {
        ConstantDef(pf.getConstantList());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
          pf.setPosition(begin, getToken(0)); {if (true) return pf;}
    throw new Error("Missing return statement in function");
  }

// Properties file with optional semicolons - beware of potential ambiguities
  static final public PropertiesFile PropertiesFileSemicolonless() throws ParseException, PrismLangException {
        PropertiesFile pf = new PropertiesFile(modelInfo);
        Property prop;
        Token begin = null;
          begin = getToken(1);
    label_4:
    while (true) {
      if (jj_2_17(3)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_19(3)) {
        prop = Property();
        label_5:
        while (true) {
          if (jj_2_18(3)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(SEMICOLON);
        }
                                                     pf.addProperty(prop);
      } else if (jj_2_20(3)) {
        LabelDef(pf.getLabelList());
      } else if (jj_2_21(3)) {
        ConstantDef(pf.getConstantList());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
          pf.setPosition(begin, getToken(0)); {if (true) return pf;}
    throw new Error("Missing return statement in function");
  }

// Property - expression, with optional name/comment
  static final public Property Property() throws ParseException {
        String name = null;
        Expression expr;
        Property prop;
        Token begin = null;
            begin = getToken(1);
    if (jj_2_22(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
      jj_consume_token(COLON);
    } else {
      ;
    }
    expr = ExpressionITE(true, false);
          prop = new Property(expr, name, getPrecedingCommentBlock(begin));
          prop.setPosition(begin, getToken(0)); {if (true) return prop;}
    throw new Error("Missing return statement in function");
  }

// A single expression
  static final public Expression SingleExpression() throws ParseException {
        Expression ret;
    ret = Expression(false, false);
    jj_consume_token(0);
                                                   {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// A single LTL formula
  static final public Expression SingleLTLFormula() throws ParseException {
        Expression ret;
    ret = Expression(true, true);
    jj_consume_token(0);
                                                 {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Modules file stuff (a few bits of which are reused for property files)
//-----------------------------------------------------------------------------------

// Keyword denoting model type
  static final public ModelType ModulesFileType() throws ParseException {
        ModelType modelType = null;
    if (jj_2_29(3)) {
      if (jj_2_23(3)) {
        jj_consume_token(DTMC);
      } else if (jj_2_24(3)) {
        jj_consume_token(PROBABILISTIC);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                     modelType=ModelType.DTMC;
    } else if (jj_2_30(3)) {
      if (jj_2_25(3)) {
        jj_consume_token(MDP);
      } else if (jj_2_26(3)) {
        jj_consume_token(NONDETERMINISTIC);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       modelType=ModelType.MDP;
    } else if (jj_2_31(3)) {
      if (jj_2_27(3)) {
        jj_consume_token(CTMC);
      } else if (jj_2_28(3)) {
        jj_consume_token(STOCHASTIC);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                  modelType=ModelType.CTMC;
    } else if (jj_2_32(3)) {
      jj_consume_token(PTA);
                  modelType=ModelType.PTA;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return modelType;}
    throw new Error("Missing return statement in function");
  }

// Formula definition
  static final public void FormulaDef(FormulaList formulaList) throws ParseException {
        ExpressionIdent name = null;
        Expression expr = null;
    jj_consume_token(FORMULA);
    name = IdentifierExpression();
    jj_consume_token(EQ);
    expr = Expression(false, false);
    jj_consume_token(SEMICOLON);
          formulaList.addFormula(name, expr);
  }

// Label definition
  static final public void LabelDef(LabelList labelList) throws ParseException, PrismLangException {
        ExpressionIdent name = null;
        Expression expr = null;
    if (jj_2_33(2147483647)) {
      jj_consume_token(LABEL);
      jj_consume_token(DQUOTE);
      name = IdentifierExpression();
      jj_consume_token(DQUOTE);
      jj_consume_token(EQ);
      expr = Expression(false, false);
      jj_consume_token(SEMICOLON);
          labelList.addLabel(name, expr);
    } else if (jj_2_34(2147483647)) {
      jj_consume_token(LABEL);
      name = IdentifierExpression();
                                                                         {if (true) throw new PrismLangException("Label names must be enclosed in double-quotes", name);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Constant definition
  static final public void ConstantDef(ConstantList constantList) throws ParseException {
        Type type = TypeInt.getInstance();
        ExpressionIdent name = null;
        Expression expr = null;
    if (jj_2_41(3)) {
      jj_consume_token(CONST);
      if (jj_2_38(3)) {
        if (jj_2_35(3)) {
          jj_consume_token(INT);
                             type=TypeInt.getInstance();
        } else if (jj_2_36(3)) {
          jj_consume_token(DOUBLE);
                                                                        type=TypeDouble.getInstance();
        } else if (jj_2_37(3)) {
          jj_consume_token(BOOL);
                                                                                                                    type=TypeBool.getInstance();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else if (jj_2_42(3)) {
      if (jj_2_39(3)) {
        jj_consume_token(RATE);
      } else if (jj_2_40(3)) {
        jj_consume_token(PROB);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                               type=TypeDouble.getInstance();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    // Name and (optional) initial value
            name = IdentifierExpression();
    if (jj_2_43(3)) {
      jj_consume_token(EQ);
      expr = Expression(false, false);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
          constantList.addConstant(name, expr, type);
  }

// Global variable declaration
  static final public Declaration GlobalDecl() throws ParseException {
        Declaration decl = null;
    jj_consume_token(GLOBAL);
    decl = Declaration();
          {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

// Variable declaration
  static final public Declaration Declaration() throws ParseException {
        Declaration decl;
        String name = null;
        DeclarationType declType;
        Expression init = null;
        Token begin = null;
            begin = getToken(1);
    name = Identifier();
    jj_consume_token(COLON);
    declType = DeclarationVarType();
                  decl = new Declaration(name, declType);
    if (jj_2_44(3)) {
      jj_consume_token(INIT);
      init = Expression(false, false);
          decl.setStart(init);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
          decl.setPosition(begin, getToken(0)); {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

// Type part of a declaration
  static final public DeclarationType DeclarationVarType() throws ParseException {
        Expression low = null, high = null;
        DeclarationType declType, subtype;
        Token begin = null;
            begin = getToken(1);
    if (jj_2_45(3)) {
      jj_consume_token(LBRACKET);
      low = Expression(false, false);
      jj_consume_token(DOTS);
      high = Expression(false, false);
      jj_consume_token(RBRACKET);
                  declType = new DeclarationInt(low, high);
    } else if (jj_2_46(3)) {
      jj_consume_token(INT);
                    declType = new DeclarationIntUnbounded();
    } else if (jj_2_47(3)) {
      jj_consume_token(BOOL);
                     declType = new DeclarationBool();
    } else if (jj_2_48(3)) {
      jj_consume_token(CLOCK);
                      declType = new DeclarationClock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          declType.setPosition(begin, getToken(0)); {if (true) return declType;}
    throw new Error("Missing return statement in function");
  }

// Module
  static final public Module Module() throws ParseException {
        ExpressionIdent name = null;
        Declaration var = null;
        Expression invar;
        Command comm = null;
        Module module = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = IdentifierExpression();
                                                         module = new Module(name.getName());
    label_6:
    while (true) {
      if (jj_2_49(3)) {
        ;
      } else {
        break label_6;
      }
      var = Declaration();
                                module.addDeclaration(var);
    }
    if (jj_2_50(3)) {
      jj_consume_token(INVARIANT);
      invar = Expression(false, false);
      jj_consume_token(ENDINVARIANT);
                                                                        module.setInvariant(invar);
    } else {
      ;
    }
    label_7:
    while (true) {
      if (jj_2_51(3)) {
        ;
      } else {
        break label_7;
      }
      comm = Command();
                             module.addCommand(comm);
    }
    jj_consume_token(ENDMODULE);
          module.setPosition(begin, getToken(0)); module.setNameASTElement(name); {if (true) return module;}
    throw new Error("Missing return statement in function");
  }

// Command
  static final public Command Command() throws ParseException {
        String synch = null;
        Expression guard = null;
        Updates updates = null;
        Command comm = new Command();
        Token begin = null;
    // Synchronisation action-label
            begin = jj_consume_token(LBRACKET);
    if (jj_2_52(3)) {
      synch = Identifier();
                                                    comm.setSynch(synch);
    } else {
      ;
    }
    jj_consume_token(RBRACKET);
    // Guard/updates
            guard = Expression(false, false);
                                           comm.setGuard(guard);
    jj_consume_token(RARROW);
    updates = Updates();
                                                                                                  comm.setUpdates(updates);
    jj_consume_token(SEMICOLON);
          comm.setPosition(begin, getToken(0)); {if (true) return comm;}
    throw new Error("Missing return statement in function");
  }

// Updates
  static final public Updates Updates() throws ParseException {
        Expression prob;
        Update update;
        Updates updates = new Updates();
        Token begin = null;
          begin = getToken(1);
    if (jj_2_54(2147483647)) {
      update = Update();
                  updates.addUpdate(null, update);
    } else if (jj_2_55(3)) {
      prob = Expression(false, false);
      jj_consume_token(COLON);
      update = Update();
                                                                              updates.addUpdate(prob, update);
      label_8:
      while (true) {
        if (jj_2_53(3)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(PLUS);
        prob = Expression(false, false);
        jj_consume_token(COLON);
        update = Update();
                                                                                     updates.addUpdate(prob, update);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          updates.setPosition(begin, getToken(0)); {if (true) return updates;}
    throw new Error("Missing return statement in function");
  }

  static final public Update Update() throws ParseException {
        Update update = new Update();
        Token begin = null;
          begin = getToken(1);
    if (jj_2_57(3)) {
      UpdateElement(update);
      label_9:
      while (true) {
        if (jj_2_56(3)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(AND);
        UpdateElement(update);
      }
    } else if (jj_2_58(3)) {
      jj_consume_token(TRUE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          update.setPosition(begin, getToken(0)); {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  static final public void UpdateElement(Update update) throws ParseException {
        ExpressionIdent var = null;
        Expression expr = null;
    jj_consume_token(LPARENTH);
    var = IdentifierPrime();
    jj_consume_token(EQ);
    expr = Expression(false, false);
    jj_consume_token(RPARENTH);
                                                                                             update.add(var, expr);
  }

// Module renaming
  static final public RenamedModule RenamedModule() throws ParseException {
        ExpressionIdent name = null, base = null;
        RenamedModule rm = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = IdentifierExpression();
    jj_consume_token(EQ);
    base = IdentifierExpression();
                                                                                            rm = new RenamedModule(name.getName(), base.getName());
    jj_consume_token(LBRACKET);
    Rename(rm);
    label_10:
    while (true) {
      if (jj_2_59(3)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      Rename(rm);
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(ENDMODULE);
          rm.setPosition(begin, getToken(0)); rm.setNameASTElement(name); rm.setBaseModuleASTElement(base); {if (true) return rm;}
    throw new Error("Missing return statement in function");
  }

  static final public void Rename(RenamedModule rm) throws ParseException {
        ExpressionIdent id1 = null, id2 = null;
    // NB: have to explicitly include keywords for functions because they can be renamed
            id1 = IdentifierExpressionMinMax();
    jj_consume_token(EQ);
    id2 = IdentifierExpressionMinMax();
                rm.addRename(id1.getName(), id2.getName(), id1, id2);
  }

// Reward structure
  static final public RewardStruct RewardStruct() throws ParseException {
        String name = null, s = null;
        Expression guard = null, value = null;
        RewardStruct rs = new RewardStruct();
        RewardStructItem rsi;
        Token begin = null, begin2 = null;
    begin = jj_consume_token(REWARDS);
    if (jj_2_60(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
                                                                      rs.setName(name);
    } else {
      ;
    }
    label_11:
    while (true) {
      if (jj_2_61(3)) {
        ;
      } else {
        break label_11;
      }
            begin2 = getToken(1); s = null;
      if (jj_2_63(3)) {
        jj_consume_token(LBRACKET);
                                                             s = "";
        if (jj_2_62(3)) {
          s = Identifier();
        } else {
          ;
        }
        jj_consume_token(RBRACKET);
      } else {
        ;
      }
      guard = Expression(false, false);
      jj_consume_token(COLON);
      value = Expression(false, false);
      jj_consume_token(SEMICOLON);
          rsi = new RewardStructItem(s, guard, value); rsi.setPosition(begin2, getToken(0)); rs.addItem(rsi);
    }
    jj_consume_token(ENDREWARDS);
          rs.setPosition(begin, getToken(0)); {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

// Initial states ("init...endinit" construct)
  static final public Expression Init() throws ParseException {
        Expression expr = null;
    jj_consume_token(INIT);
    expr = Expression(false, false);
    jj_consume_token(ENDINIT);
                                                           {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// System definition ("system...endsystem" construct)
  static final public void SystemEndsystem(ModulesFile mf) throws ParseException {
        String name = null;
        SystemDefn sysdef;
    jj_consume_token(SYSTEM);
    if (jj_2_64(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
    } else {
      ;
    }
    sysdef = SystemDefn();
    jj_consume_token(ENDSYSTEM);
                mf.addSystemDefn(sysdef, name);
  }

// System definition component
  static final public SystemDefn SystemDefn() throws ParseException {
        SystemDefn ret;
    ret = SystemFullParallel();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// System definition component (full parallel)
  static final public SystemDefn SystemFullParallel() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemFullParallel par = null;
        Token begin;
          begin = getToken(1);
    sys1 = SystemInterleaved();
            par = new SystemFullParallel(); par.addOperand(sys1);
    label_12:
    while (true) {
      if (jj_2_65(2147483647)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemParallel();
                                                                                                                               par.addOperand(sys2);
    }
                if (par==null || par.getNumOperands() == 1) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (interleaved parallel)
  static final public SystemDefn SystemInterleaved() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemInterleaved par = null;
        Token begin;
          begin = getToken(1);
    sys1 = SystemParallel();
            par = new SystemInterleaved(); par.addOperand(sys1);
    label_13:
    while (true) {
      if (jj_2_66(2147483647)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemFullParallel();
                                                                                                                                             par.addOperand(sys2);
    }
                if (par==null || par.getNumOperands() == 1) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (parallel over set of actions)
  static final public SystemDefn SystemParallel() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemParallel par = null;
        String s;
        Token begin;
          begin = getToken(1);
    sys1 = SystemHideRename();
    if (jj_2_68(2147483647)) {
                                       par = new SystemParallel(); par.setOperand1(sys1);
      jj_consume_token(OR);
      jj_consume_token(LBRACKET);
      s = Identifier();
                                          par.addAction(s);
      label_14:
      while (true) {
        if (jj_2_67(3)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMMA);
        s = Identifier();
                                                                                           par.addAction(s);
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(OR);
      sys2 = SystemHideRename();
                                           par.setOperand2(sys2);
    } else {
      ;
    }
                if (par==null) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (hiding and renaming)
  static final public SystemDefn SystemHideRename() throws ParseException {
        SystemDefn sys = null;
        SystemHide hide = null;
        SystemRename rename = null;
        String s1 = null, s2 = null;
        Token begin;
          begin = getToken(1);
    sys = SystemAtomic();
    label_15:
    while (true) {
      if (jj_2_69(3)) {
        ;
      } else {
        break label_15;
      }
      if (jj_2_72(3)) {
                  hide = new SystemHide(sys);
        jj_consume_token(DIVIDE);
        jj_consume_token(LBRACE);
        s1 = Identifier();
                                                        hide.addAction(s1);
        label_16:
        while (true) {
          if (jj_2_70(3)) {
            ;
          } else {
            break label_16;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
                                                                                                            hide.addAction(s1);
        }
        jj_consume_token(RBRACE);
                  sys = hide;
      } else if (jj_2_73(3)) {
                  rename = new SystemRename(sys);
        jj_consume_token(LBRACE);
        s1 = Identifier();
        jj_consume_token(RENAME);
        s2 = Identifier();
                                                                        rename.addRename(s1, s2);
        label_17:
        while (true) {
          if (jj_2_71(3)) {
            ;
          } else {
            break label_17;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
          jj_consume_token(RENAME);
          s2 = Identifier();
                                                                         rename.addRename(s1, s2);
        }
        jj_consume_token(RBRACE);
                  sys = rename;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          sys.setPosition(begin, getToken(0)); {if (true) return sys;}
    throw new Error("Missing return statement in function");
  }

// System definition component (bottom level)
  static final public SystemDefn SystemAtomic() throws ParseException {
        String name = null;
        SystemDefn sys = null;
        Token begin;
          begin = getToken(1);
    if (jj_2_74(3)) {
      name = Identifier();
                                sys = new SystemModule(name);
    } else if (jj_2_75(3)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
                                                   sys = new SystemReference(name);
    } else if (jj_2_76(3)) {
      jj_consume_token(LPARENTH);
      sys = SystemDefn();
      jj_consume_token(RPARENTH);
                                                      sys = new SystemBrackets(sys);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          sys.setPosition(begin, getToken(0)); {if (true) return sys;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Expressions.
// This includes PRISM properties (if the "prop" parameter is true)
// and (within this) path formulas (if the "pathprop" parameter is true).
// Which allows us to use the same productions for the grammars for
// all three cases (they are very similar).
//-----------------------------------------------------------------------------------

// Expression
  static final public Expression Expression(boolean prop, boolean pathprop) throws ParseException {
        Expression ret;
    ret = ExpressionTemporalBinary(prop, pathprop);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: temporal operators, binary (U, W, R) and unary (X, F, G)

// Note: the potential occurrence of two successive (unseparated) expressions
// (e.g. "a" and "b" in "F<=a b") is a grammar flaw because the function and
// minus operators can cause ambiguities, for example:
// "F<=a(b)+c(d)" = "F<=a" "(b)+c(d)" = "F<=a(b)+c" "(d)" ?
// "F<=-a-b-c" = "F<=-a" "-b-c" = "F<=-a-b" "-c" ?
// In many cases, these could be distinguished by type checking but
// that does not really help since this is done post-parsing.
// To prevent (very common) cases such as "F<=t (b)", "F<=t (b)&(c)", etc.
// being mis-parsed ("t(b)" would always be taken over "t"), we catch this case
// separately (see TimeBound() production below for details).
// This means that more complex time-bounds, especially those that
// start/end with an identifier should be parenthesised, e.g. "F<=(t1+t2)".

// In fact, JavaCC also warns about lookahead for this function.
// This is because (like unary minus), R can appear on the left of a unary
// operator (reward R operator) or in the middle of a binary operator (release).
  static final public Expression ExpressionTemporalBinary(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        ExpressionTemporal exprTemp;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionTemporalUnary(prop, pathprop);
    if (jj_2_81(3)) {
                  if (!pathprop) {if (true) throw generateParseException();}
                  exprTemp = new ExpressionTemporal(); exprTemp.setOperand1(ret);
      if (jj_2_77(3)) {
        jj_consume_token(U);
                        exprTemp.setOperator(ExpressionTemporal.P_U);
      } else if (jj_2_78(3)) {
        jj_consume_token(W);
                        exprTemp.setOperator(ExpressionTemporal.P_W);
      } else if (jj_2_79(3)) {
        jj_consume_token(R);
                        exprTemp.setOperator(ExpressionTemporal.P_R);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_80(3)) {
        TimeBound(exprTemp);
      } else {
        ;
      }
      expr = ExpressionTemporalUnary(prop, pathprop);
                  exprTemp.setOperand2(expr); exprTemp.setPosition(begin, getToken(0)); ret = exprTemp;
    } else {
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpressionTemporalUnary(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        ExpressionTemporal exprTemp;
        Token begin = null;
    if (jj_2_86(3)) {
                  if (!pathprop) {if (true) throw generateParseException();}
                  begin = getToken(1); exprTemp = new ExpressionTemporal();
      if (jj_2_82(3)) {
        jj_consume_token(X);
                        exprTemp.setOperator(ExpressionTemporal.P_X);
      } else if (jj_2_83(3)) {
        jj_consume_token(F);
                        exprTemp.setOperator(ExpressionTemporal.P_F);
      } else if (jj_2_84(3)) {
        jj_consume_token(G);
                        exprTemp.setOperator(ExpressionTemporal.P_G);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_85(3)) {
        TimeBound(exprTemp);
      } else {
        ;
      }
      expr = ExpressionTemporalUnary(prop, pathprop);
                  exprTemp.setOperand2(expr); exprTemp.setPosition(begin, getToken(0)); ret = exprTemp;
    } else if (jj_2_87(3)) {
      ret = ExpressionITE(prop, pathprop);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Time bound for temporal operators
// (see ExpressionTemporal production for lookahead explanation)
  static final public void TimeBound(ExpressionTemporal exprTemp) throws ParseException {
        Expression lBound, uBound;
    if (jj_2_96(3)) {
      jj_consume_token(LE);
      if (jj_2_88(2147483647)) {
        uBound = IdentifierExpression();
      } else if (jj_2_89(3)) {
        uBound = Expression(false, false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                        exprTemp.setUpperBound(uBound, false);
    } else if (jj_2_97(3)) {
      jj_consume_token(LT);
      if (jj_2_90(2147483647)) {
        uBound = IdentifierExpression();
      } else if (jj_2_91(3)) {
        uBound = Expression(false, false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                        exprTemp.setUpperBound(uBound, true);
    } else if (jj_2_98(3)) {
      jj_consume_token(GE);
      if (jj_2_92(2147483647)) {
        lBound = IdentifierExpression();
      } else if (jj_2_93(3)) {
        lBound = Expression(false, false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                        exprTemp.setLowerBound(lBound, false);
    } else if (jj_2_99(3)) {
      jj_consume_token(GT);
      if (jj_2_94(2147483647)) {
        lBound = IdentifierExpression();
      } else if (jj_2_95(3)) {
        lBound = Expression(false, false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                        exprTemp.setLowerBound(lBound, true);
    } else if (jj_2_100(3)) {
      jj_consume_token(LBRACKET);
      lBound = Expression(false, false);
      jj_consume_token(COMMA);
      uBound = Expression(false, false);
      jj_consume_token(RBRACKET);
                                                                                                                exprTemp.setLowerBound(lBound, false); exprTemp.setUpperBound(uBound, false);
    } else if (jj_2_101(3)) {
      jj_consume_token(EQ);
      lBound = Expression(false, false);
                                                     exprTemp.setEqualBounds(lBound);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Expression: if-then-else, i.e. "cond ? then : else"
  static final public Expression ExpressionITE(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, left, right;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionImplies(prop, pathprop);
    if (jj_2_102(3)) {
      jj_consume_token(QMARK);
      left = ExpressionImplies(prop, pathprop);
      jj_consume_token(COLON);
      right = ExpressionITE(prop, pathprop);
                  ret = new ExpressionITE(ret, left, right); ret.setPosition(begin, getToken(0));
    } else {
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: implies
  static final public Expression ExpressionImplies(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionIff(prop, pathprop);
    label_18:
    while (true) {
      if (jj_2_103(3)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(IMPLIES);
      expr = ExpressionIff(prop, pathprop);
                                                           ret = new ExpressionBinaryOp(ExpressionBinaryOp.IMPLIES, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: if-and-only-iff
  static final public Expression ExpressionIff(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionOr(prop, pathprop);
    label_19:
    while (true) {
      if (jj_2_104(3)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(IFF);
      expr = ExpressionOr(prop, pathprop);
                                                      ret = new ExpressionBinaryOp(ExpressionBinaryOp.IFF, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: or
  static final public Expression ExpressionOr(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionAnd(prop, pathprop);
    label_20:
    while (true) {
      if (jj_2_105(3)) {
        ;
      } else {
        break label_20;
      }
      jj_consume_token(OR);
      expr = ExpressionAnd(prop, pathprop);
                                                      ret = new ExpressionBinaryOp(ExpressionBinaryOp.OR, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: and
  static final public Expression ExpressionAnd(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionNot(prop, pathprop);
    label_21:
    while (true) {
      if (jj_2_106(3)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(AND);
      expr = ExpressionNot(prop, pathprop);
                                                       ret = new ExpressionBinaryOp(ExpressionBinaryOp.AND, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: not
  static final public Expression ExpressionNot(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
    if (jj_2_107(3)) {
      begin = jj_consume_token(NOT);
      expr = ExpressionNot(prop, pathprop);
                                                                     ret = new ExpressionUnaryOp(ExpressionUnaryOp.NOT, expr); ret.setPosition(begin, getToken(0));
    } else if (jj_2_108(3)) {
      ret = ExpressionEquality(prop, pathprop);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: equality operators: =, !=
  static final public Expression ExpressionEquality(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionRelop(prop, pathprop);
    label_22:
    while (true) {
      if (jj_2_109(3)) {
        ;
      } else {
        break label_22;
      }
      op = EqNeq();
      expr = ExpressionRelop(prop, pathprop);
                                                                ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: relational operators: >, <, >=, <=
  static final public Expression ExpressionRelop(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionPlusMinus(prop, pathprop);
    label_23:
    while (true) {
      if (jj_2_110(3)) {
        ;
      } else {
        break label_23;
      }
      op = LtGt();
      expr = ExpressionPlusMinus(prop, pathprop);
                                                                   ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: plus/minus

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "-a-b" = "(-a)-b" = "-a" "-b"
// Ignoring the warning results in the largest match being taken.
  static final public Expression ExpressionPlusMinus(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionTimesDivide(prop, pathprop);
    label_24:
    while (true) {
      if (jj_2_111(3)) {
        ;
      } else {
        break label_24;
      }
      if (jj_2_112(3)) {
        jj_consume_token(PLUS);
                           op = ExpressionBinaryOp.PLUS;
      } else if (jj_2_113(3)) {
        jj_consume_token(MINUS);
                                                                       op = ExpressionBinaryOp.MINUS;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionTimesDivide(prop, pathprop);
                                                               ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: times/divide
  static final public Expression ExpressionTimesDivide(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionUnaryMinus(prop, pathprop);
    label_25:
    while (true) {
      if (jj_2_114(3)) {
        ;
      } else {
        break label_25;
      }
      if (jj_2_115(3)) {
        jj_consume_token(TIMES);
                            op = ExpressionBinaryOp.TIMES;
      } else if (jj_2_116(3)) {
        jj_consume_token(DIVIDE);
                                                                          op = ExpressionBinaryOp.DIVIDE;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionUnaryMinus(prop, pathprop);
                                                              ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: unary minus
  static final public Expression ExpressionUnaryMinus(boolean prop, boolean pathprop) throws ParseException {
        Expression ret, expr;
        Token begin = null;
    if (jj_2_117(3)) {
      begin = jj_consume_token(MINUS);
      expr = ExpressionUnaryMinus(prop, pathprop);
                  ret = new ExpressionUnaryOp(ExpressionUnaryOp.MINUS, expr); ret.setPosition(begin, getToken(0));
    } else if (jj_2_118(3)) {
      ret = ExpressionBasic(prop, pathprop);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Basic expression (top of operator precedence ordering)
  static final public Expression ExpressionBasic(boolean prop, boolean pathprop) throws ParseException {
        Expression ret;
    if (jj_2_119(3)) {
      ret = ExpressionLiteral(prop, pathprop);
    } else if (jj_2_120(3)) {
      ret = ExpressionFuncOrIdent(prop, pathprop);
    } else if (jj_2_121(3)) {
      ret = ExpressionFuncMinMax(prop, pathprop);
    } else if (jj_2_122(3)) {
      ret = ExpressionFuncOldStyle(prop, pathprop);
    } else if (jj_2_123(3)) {
      ret = ExpressionParenth(prop, pathprop);
    } else if (jj_2_124(3)) {
      // Remaining options are only applicable for properties
                      ret = ExpressionProb(prop, pathprop);
    } else if (jj_2_125(3)) {
      ret = ExpressionSS(prop, pathprop);
    } else if (jj_2_126(3)) {
      ret = ExpressionReward(prop, pathprop);
    } else if (jj_2_127(3)) {
      ret = ExpressionExists(prop, pathprop);
    } else if (jj_2_128(3)) {
      ret = ExpressionForAll(prop, pathprop);
    } else if (jj_2_129(3)) {
      ret = ExpressionStrategy(prop, pathprop);
    } else if (jj_2_130(3)) {
      ret = ExpressionLabel(prop, pathprop);
    } else if (jj_2_131(3)) {
      ret = ExpressionFilter(prop, pathprop);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: function or identifier

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "a(b)" = "a" "(b)"
// Ignoring the warning results in the largest match being taken.
  static final public Expression ExpressionFuncOrIdent(boolean prop, boolean pathprop) throws ParseException {
        String s = null;
        Expression ret = null;
        Token begin = null;
    // If there is no "(...)", this is an identifier
            s = Identifier();
                           ret = new ExpressionIdent(s); begin = getToken(0);
    if (jj_2_132(3)) {
      jj_consume_token(LPARENTH);
                       ret = new ExpressionFunc(s);
      ExpressionFuncArgs(prop, pathprop, (ExpressionFunc)ret);
      jj_consume_token(RPARENTH);
    } else {
      ;
    }
          ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: min/max function (treated differently because min/max are keywords)
  static final public Expression ExpressionFuncMinMax(boolean prop, boolean pathprop) throws ParseException {
        String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    if (jj_2_133(3)) {
      begin = jj_consume_token(MIN);
                          s = "min";
    } else if (jj_2_134(3)) {
      begin = jj_consume_token(MAX);
                                                         s = "max";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          func = new ExpressionFunc(s);
    jj_consume_token(LPARENTH);
    ExpressionFuncArgs(prop, pathprop, func);
    jj_consume_token(RPARENTH);
          func.setPosition(begin, getToken(0)); {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

// Expression: old-style function, i.e. "func(name, ...)"
  static final public Expression ExpressionFuncOldStyle(boolean prop, boolean pathprop) throws ParseException {
        String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    begin = jj_consume_token(FUNC);
    jj_consume_token(LPARENTH);
    if (jj_2_135(3)) {
      jj_consume_token(MIN);
                                            s = "min";
    } else if (jj_2_136(3)) {
      jj_consume_token(MAX);
                                                                   s = "max";
    } else if (jj_2_137(3)) {
      s = Identifier();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
                  func = new ExpressionFunc(s); func.setOldStyle(true);
    ExpressionFuncArgs(prop, pathprop, func);
    jj_consume_token(RPARENTH);
          func.setPosition(begin, getToken(0)); {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

// Arguments for a function in an expression
  static final public void ExpressionFuncArgs(boolean prop, boolean pathprop, ExpressionFunc func) throws ParseException {
        Expression expr;
    expr = Expression(prop, pathprop);
                                            func.addOperand(expr);
    label_26:
    while (true) {
      if (jj_2_138(3)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(COMMA);
      expr = Expression(prop, pathprop);
                                                                                                                   func.addOperand(expr);
    }
  }

// Expression: literal
  static final public Expression ExpressionLiteral(boolean prop, boolean pathprop) throws ParseException {
        Expression ret = null;
    if (jj_2_139(3)) {
      jj_consume_token(REG_INT);
                try {
                        int i = Integer.parseInt(getToken(0).image);
                        ret = new ExpressionLiteral(TypeInt.getInstance(), new Integer(i));
                } catch (NumberFormatException e) {
                        // Need to catch this because some matches for regexp REG_INT
                        // are not valid integers (e.g. too big).
                        ParseException ex = new ParseException("Invalid integer literal");
                        ex.currentToken = getToken(0);
                        {if (true) throw ex;}
                        // NB: can't call generateParseException() here; it crashes
                }
    } else if (jj_2_140(3)) {
      jj_consume_token(REG_DOUBLE);
                try {
                        double d = Double.parseDouble(getToken(0).image);
                        ret = new ExpressionLiteral(TypeDouble.getInstance(), new Double(d), getToken(0).image);
                } catch (NumberFormatException e) {
                        // Need to catch this because some matches for regexp REG_DOUBLE
                        // may not be valid doubles.
                        ParseException ex = new ParseException("Invalid double literal");
                        // NB: can't call generateParseException() here; it crashes
                }
    } else if (jj_2_141(3)) {
      jj_consume_token(TRUE);
                 ret = new ExpressionLiteral(TypeBool.getInstance(), new Boolean(true));
    } else if (jj_2_142(3)) {
      jj_consume_token(FALSE);
                  ret = new ExpressionLiteral(TypeBool.getInstance(), new Boolean(false));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          ret.setPosition(getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: parentheses
  static final public Expression ExpressionParenth(boolean prop, boolean pathprop) throws ParseException {
        Expression expr, ret;
        Token begin = null;
    begin = jj_consume_token(LPARENTH);
    expr = Expression(prop, pathprop);
    jj_consume_token(RPARENTH);
          ret = new ExpressionUnaryOp(ExpressionUnaryOp.PARENTH, expr); ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Property stuff
//-----------------------------------------------------------------------------------

// (Property) expression: probabilistic operator P
  static final public Expression ExpressionProb(boolean prop, boolean pathprop) throws ParseException {
        ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression prob = null;
        Expression expr;
        Filter filter = null;
        ExpressionProb ret = new ExpressionProb();
        Token begin = null;
        boolean isBool;
          if (!prop) {if (true) throw generateParseException();}
    if (jj_2_148(3)) {
      begin = jj_consume_token(P);
      if (jj_2_143(3)) {
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
      } else {
        ;
      }
      if (jj_2_144(3)) {
        r = LtGt();
        prob = Expression(false, false);
                                                                       relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
      } else if (jj_2_145(3)) {
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                 relOp = "="; isBool = false;
      } else if (jj_2_146(3)) {
        jj_consume_token(MIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                       relOp = "min="; isBool = false;
      } else if (jj_2_147(3)) {
        jj_consume_token(MAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                       relOp = "max="; isBool = false;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_149(3)) {
      begin = jj_consume_token(PMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "min="; isBool = false;
    } else if (jj_2_150(3)) {
      begin = jj_consume_token(PMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "max="; isBool = false;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    if (jj_2_151(3)) {
      filter = Filter();
    } else {
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if (true) return ef;}
                }
                else {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Filter for a P/S/R operator
  static final public Filter Filter() throws ParseException {
        Filter filter;
        Expression expr;
        Token begin = null;
    begin = jj_consume_token(LBRACE);
    expr = Expression(true, false);
                                                          filter = new Filter(expr);
    jj_consume_token(RBRACE);
    label_27:
    while (true) {
      if (jj_2_152(3)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(LBRACE);
      if (jj_2_153(3)) {
        jj_consume_token(MIN);
                          filter.setMinRequested(true);
      } else if (jj_2_154(3)) {
        jj_consume_token(MAX);
                          filter.setMaxRequested(true);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
    }
          filter.setPosition(begin, getToken(0)); {if (true) return filter;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: steady-state operator S
  static final public Expression ExpressionSS(boolean prop, boolean pathprop) throws ParseException {
        ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression prob = null;
        Expression expr;
        Filter filter = null;
        ExpressionSS ret = new ExpressionSS();
        Token begin;
        boolean isBool;
          if (!prop) {if (true) throw generateParseException();}
    // Various options for "S" keyword and attached symbols
            begin = jj_consume_token(S);
    if (jj_2_156(3)) {
      if (jj_2_155(3)) {
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
      } else {
        ;
      }
      r = LtGt();
      prob = Expression(false, false);
                                                               relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
    } else if (jj_2_157(3)) {
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                 relOp = "="; isBool = false;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = Expression(prop, pathprop);
    if (jj_2_158(3)) {
      filter = Filter();
    } else {
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if (true) return ef;}
                }
                else {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: expected reward operator R
  static final public Expression ExpressionReward(boolean prop, boolean pathprop) throws ParseException {
        ExpressionIdent modifier = null;
        int r;
        String relOp = null;
        Expression rew = null;
        Expression expr;
        Filter filter = null;
        ExpressionReward ret = new ExpressionReward();
        Token begin;
        boolean isBool;
          if (!prop) {if (true) throw generateParseException();}
    if (jj_2_165(3)) {
      begin = jj_consume_token(R);
      if (jj_2_159(3)) {
        jj_consume_token(LPARENTH);
        modifier = IdentifierExpression();
        jj_consume_token(RPARENTH);
      } else {
        ;
      }
      if (jj_2_160(3)) {
        RewardIndex(ret);
      } else {
        ;
      }
      if (jj_2_161(3)) {
        r = LtGt();
        rew = Expression(false, false);
                                                               relOp = ExpressionBinaryOp.opSymbols[r]; isBool = true;
      } else if (jj_2_162(3)) {
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                             relOp = "="; isBool = false;
      } else if (jj_2_163(3)) {
        jj_consume_token(MIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                   relOp = "min="; isBool = false;
      } else if (jj_2_164(3)) {
        jj_consume_token(MAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                   relOp = "max="; isBool = false;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_166(3)) {
      begin = jj_consume_token(RMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "min="; isBool = false;
    } else if (jj_2_167(3)) {
      begin = jj_consume_token(RMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "max="; isBool = false;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = ExpressionRewardContents(prop, pathprop);
    if (jj_2_168(3)) {
      filter = Filter();
    } else {
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setModifier(modifier == null ? null : modifier.getName());
                ret.setRelOp(relOp);
                ret.setReward(rew);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                // Filter is actually dealt with by wrapping this expression in
                // an (invisible) ExpressionFilter expression
                if (filter != null) {
                        String filterOp = isBool ? "&" : filter.getFilterOpString();
                        ExpressionFilter ef = new ExpressionFilter(filterOp, ret, filter.getExpression());
                        ef.setInvisible(true);
                        {if (true) return ef;}
                }
                else {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Reward struct index for R operator
  static final public void RewardIndex(ExpressionReward exprRew) throws ParseException {
        Object index = null;
        Object indexDiv = null;
    jj_consume_token(LBRACE);
    if (jj_2_169(2147483647)) {
      jj_consume_token(DQUOTE);
      index = Identifier();
      jj_consume_token(DQUOTE);
    } else if (jj_2_170(3)) {
      index = Expression(false, false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
    if (jj_2_173(3)) {
      jj_consume_token(DIVIDE);
      jj_consume_token(LBRACE);
      if (jj_2_171(2147483647)) {
        jj_consume_token(DQUOTE);
        indexDiv = Identifier();
        jj_consume_token(DQUOTE);
      } else if (jj_2_172(3)) {
        indexDiv = Expression(false, false);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
    } else {
      ;
    }
                exprRew.setRewardStructIndex(index);
                if (indexDiv != null) {
                        exprRew.setRewardStructIndexDiv(indexDiv);
                }
  }

// Contents of an R operator

// JavaCC warns about lookahead for this function. This is because there is a possible conflict between
// R [ S ], where "S" is the long-run reward operator, and R [ S [ ] ], where "S [ ]" is an LTL formula
// comprising a single atomic proposition. We use lookahead to resolve the ambiguity.
  static final public Expression ExpressionRewardContents(boolean prop, boolean pathprop) throws ParseException {
        Expression expr = null;
        ExpressionTemporal exprTemp = null;
        Expression ret = null;
        Token begin;
          begin = getToken(1);
    if (jj_2_174(2147483647)) {
      expr = ExpressionSS(prop, true);
                                                                                  ret = expr;
    } else if (jj_2_175(3)) {
      jj_consume_token(S);
                ret = new ExpressionTemporal(ExpressionTemporal.R_S, null, null);
    } else if (jj_2_176(2147483647)) {
      begin = jj_consume_token(C);
      jj_consume_token(LE);
      expr = Expression(false, false);
                                                                                 exprTemp = new ExpressionTemporal(ExpressionTemporal.R_C, null, null); exprTemp.setUpperBound(expr); ret = exprTemp;
    } else if (jj_2_177(3)) {
      jj_consume_token(C);
                ret = new ExpressionTemporal(ExpressionTemporal.R_C, null, null);
    } else if (jj_2_178(3)) {
      jj_consume_token(M);
                ret = new ExpressionTemporal(ExpressionTemporal.R_M, null, null);
    } else if (jj_2_179(3)) {
      jj_consume_token(I);
      jj_consume_token(EQ);
      expr = Expression(false, false);
                                                     exprTemp = new ExpressionTemporal(ExpressionTemporal.R_I, null, null); exprTemp.setUpperBound(expr); ret = exprTemp;
    } else if (jj_2_180(3)) {
      expr = Expression(prop, true);
                                          ret = expr;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: CTL existential operator E
  static final public Expression ExpressionExists(boolean prop, boolean pathprop) throws ParseException {
        ExpressionExists ret = new ExpressionExists();
        Expression expr;
        Token begin = null;
          if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(E);
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    jj_consume_token(RBRACKET);
                ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: CTL universal operator A
  static final public Expression ExpressionForAll(boolean prop, boolean pathprop) throws ParseException {
        ExpressionForAll ret = new ExpressionForAll();
        Expression expr;
        Token begin = null;
          if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(A);
    jj_consume_token(LBRACKET);
    expr = Expression(prop, true);
    jj_consume_token(RBRACKET);
                ret.setExpression(expr);
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: ATL strategy operators <<>> and [[]]
  static final public Expression ExpressionStrategy(boolean prop, boolean pathprop) throws ParseException {
        ExpressionStrategy ret;
        Expression expr;
        Token begin = null;
          if (!prop) {if (true) throw generateParseException();}
    if (jj_2_181(3)) {
      begin = jj_consume_token(DLT);
                           ret = new ExpressionStrategy(true);
      ExpressionStrategyCoalition(ret);
      jj_consume_token(DGT);
    } else if (jj_2_182(3)) {
      begin = jj_consume_token(DLBRACKET);
                                 ret = new ExpressionStrategy(false);
      ExpressionStrategyCoalition(ret);
      jj_consume_token(DRBRACKET);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_185(3)) {
      if (jj_2_183(3)) {
        expr = ExpressionProb(prop, pathprop);
      } else if (jj_2_184(3)) {
        expr = ExpressionReward(prop, pathprop);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          ret.setSingleOperand(expr);
    } else if (jj_2_186(3)) {
      expr = ExpressionParenth(prop, pathprop);
          ret.addOperand(expr);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Coalition (player list) for a strategy (<<>> or [[]]) operator
  static final public void ExpressionStrategyCoalition(ExpressionStrategy exprStrat) throws ParseException {
        List<String> coalition = new ArrayList<String>();
        String s;
    if (jj_2_189(3)) {
      jj_consume_token(TIMES);
                      exprStrat.setCoalitionAllPlayers();
    } else {
      if (jj_2_188(3)) {
        s = ExpressionStrategyCoalitionPlayer();
                                                    coalition.add(s);
        label_28:
        while (true) {
          if (jj_2_187(3)) {
            ;
          } else {
            break label_28;
          }
          jj_consume_token(COMMA);
          s = ExpressionStrategyCoalitionPlayer();
                                                             coalition.add(s);
        }
      } else {
        ;
      }
          exprStrat.setCoalition(coalition);
    }
  }

// Single player in a coalition for a strategy (<<>> or [[]]) operator
  static final public String ExpressionStrategyCoalitionPlayer() throws ParseException {
        String s;
    if (jj_2_190(3)) {
      jj_consume_token(REG_INT);
    } else if (jj_2_191(3)) {
      jj_consume_token(REG_IDENT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                      s = getToken(0).image;
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: label (including "init")
  static final public Expression ExpressionLabel(boolean prop, boolean pathprop) throws ParseException {
        String s;
        ExpressionLabel ret = null;
        Token begin;
          if (!prop) {if (true) throw generateParseException();}
    begin = jj_consume_token(DQUOTE);
    if (jj_2_192(3)) {
      s = Identifier();
    } else if (jj_2_193(3)) {
      jj_consume_token(INIT);
                                                       s = "init";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DQUOTE);
          ret = new ExpressionLabel(s); ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: filter (using "filter" keyword)
  static final public Expression ExpressionFilter(boolean prop, boolean pathprop) throws ParseException {
        ExpressionFilter expr = null;
        String op = null;
        Expression filter = null;
        Expression expr2 = null;
        Token begin = null;
          if (!prop) {if (true) throw generateParseException();}
    // filter(
            begin = jj_consume_token(FILTER);
    jj_consume_token(LPARENTH);
    if (jj_2_194(3)) {
      jj_consume_token(MIN);
                  op = "min";
    } else if (jj_2_195(3)) {
      jj_consume_token(MAX);
                                          op = "max";
    } else if (jj_2_196(3)) {
      jj_consume_token(PLUS);
                   op = "+";
    } else if (jj_2_197(3)) {
      jj_consume_token(AND);
                                         op = "&";
    } else if (jj_2_198(3)) {
      jj_consume_token(OR);
                                                              op = "|";
    } else if (jj_2_199(3)) {
      op = Identifier();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    expr2 = Expression(prop, pathprop);
    if (jj_2_200(3)) {
      jj_consume_token(COMMA);
      filter = Expression(prop, pathprop);
    } else {
      ;
    }
    jj_consume_token(RPARENTH);
          expr = new ExpressionFilter(op, expr2, filter); expr.setPosition(begin, getToken(0)); {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Miscellaneous stuff
//-----------------------------------------------------------------------------------

// Identifier (returns String)
  static final public String Identifier() throws ParseException {
    jj_consume_token(REG_IDENT);
                      {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

// Identifier (returns ExpressionIdent, storing position info)
  static final public ExpressionIdent IdentifierExpression() throws ParseException {
        String ident;
        ExpressionIdent ret;
    ident = Identifier();
          ret = new ExpressionIdent(ident); ret.setPosition(getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Identifier or min/max keyword (returns ExpressionIdent, storing position info)
  static final public ExpressionIdent IdentifierExpressionMinMax() throws ParseException {
        String ident;
        ExpressionIdent ret;
    if (jj_2_201(3)) {
      ident = Identifier();
    } else if (jj_2_202(3)) {
      jj_consume_token(MIN);
                                         ident="min";
    } else if (jj_2_203(3)) {
      jj_consume_token(MAX);
                                                                  ident="max";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          ret = new ExpressionIdent(ident); ret.setPosition(getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Primed identifier
  static final public ExpressionIdent IdentifierPrime() throws ParseException {
    jj_consume_token(REG_IDENTPRIME);
                // Remove prime, create new ident and return
                String s = getToken(0).image;
                s = s.substring(0, s.length()-1);
                ExpressionIdent expr = new ExpressionIdent(s);
                expr.setPosition(token);
                expr.setEndColumn(expr.getEndColumn() - 1);
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Equality operators: =, !=
  static final public int EqNeq() throws ParseException {
    if (jj_2_204(3)) {
      jj_consume_token(EQ);
              {if (true) return ExpressionBinaryOp.EQ;}
    } else if (jj_2_205(3)) {
      jj_consume_token(NE);
              {if (true) return ExpressionBinaryOp.NE;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Relational operators: >, <, >=, <=
  static final public int LtGt() throws ParseException {
    if (jj_2_206(3)) {
      jj_consume_token(GT);
              {if (true) return ExpressionBinaryOp.GT;}
    } else if (jj_2_207(3)) {
      jj_consume_token(LT);
              {if (true) return ExpressionBinaryOp.LT;}
    } else if (jj_2_208(3)) {
      jj_consume_token(GE);
               {if (true) return ExpressionBinaryOp.GE;}
    } else if (jj_2_209(3)) {
      jj_consume_token(LE);
              {if (true) return ExpressionBinaryOp.LE;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// For loop
  static final public ForLoop ForLoop() throws ParseException {
        String s;
        Expression from = null, to = null, step = null;
        ForLoop fl = new ForLoop();
        Token begin;
            begin = getToken(1);
    s = Identifier();
    jj_consume_token(EQ);
    from = Expression(false, false);
    jj_consume_token(COLON);
    to = Expression(false, false);
    if (jj_2_210(3)) {
      jj_consume_token(COLON);
      step = Expression(false, false);
    } else {
      ;
    }
    jj_consume_token(0);
                fl.setLHS(s);
                fl.setFrom(from);
                fl.setTo(to);
                if (step != null) fl.setStep(step);
                fl.setPosition(begin, getToken(0));
                {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  static private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  static private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  static private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  static private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  static private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  static private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  static private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  static private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  static private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  static private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  static private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  static private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  static private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  static private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  static private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  static private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  static private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  static private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  static private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  static private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  static private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  static private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  static private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  static private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  static private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  static private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  static private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  static private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  static private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  static private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  static private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  static private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  static private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  static private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  static private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  static private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  static private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  static private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  static private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  static private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  static private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  static private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  static private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  static private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  static private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  static private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  static private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  static private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  static private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  static private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  static private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  static private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  static private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  static private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  static private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  static private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  static private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  static private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  static private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  static private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  static private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  static private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  static private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  static private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  static private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  static private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  static private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  static private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  static private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  static private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  static private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  static private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  static private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  static private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  static private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  static private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  static private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  static private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  static private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  static private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  static private boolean jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  static private boolean jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  static private boolean jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  static private boolean jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  static private boolean jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  static private boolean jj_2_188(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  static private boolean jj_2_189(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  static private boolean jj_2_190(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  static private boolean jj_2_191(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  static private boolean jj_2_192(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  static private boolean jj_2_193(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  static private boolean jj_2_194(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  static private boolean jj_2_195(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  static private boolean jj_2_196(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  static private boolean jj_2_197(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  static private boolean jj_2_198(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  static private boolean jj_2_199(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  static private boolean jj_2_200(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  static private boolean jj_2_201(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  static private boolean jj_2_202(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  static private boolean jj_2_203(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  static private boolean jj_2_204(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  static private boolean jj_2_205(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  static private boolean jj_2_206(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  static private boolean jj_2_207(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  static private boolean jj_2_208(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  static private boolean jj_2_209(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  static private boolean jj_2_210(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  static private boolean jj_3R_42() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_137() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(GLOBAL)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(PROB)) return true;
    return false;
  }

  static private boolean jj_3_136() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_142() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(RATE)) return true;
    return false;
  }

  static private boolean jj_3_141() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(CONST)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    if (jj_3R_51()) return true;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3_140() {
    if (jj_scan_token(REG_DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_135() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_139() {
    if (jj_scan_token(REG_INT)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_139()) {
    jj_scanpos = xsp;
    if (jj_3_140()) {
    jj_scanpos = xsp;
    if (jj_3_141()) {
    jj_scanpos = xsp;
    if (jj_3_142()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_134() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(FORMULA)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(STOCHASTIC)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(NONDETERMINISTIC)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(PROBABILISTIC)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(PTA)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(CTMC)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(MDP)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(DTMC)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) return true;
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_133() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) return true;
    }
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_132() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_132()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_131() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3_130() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3_129() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_128() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3_127() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_116() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_126() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_125() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_124() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3_123() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3_122() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_121() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_120() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_119() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3_113() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_40()) return true;
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) {
    jj_scanpos = xsp;
    if (jj_3_131()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_118() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_117() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_115() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_112() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) return true;
    }
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_110() {
    if (jj_3R_64()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_109() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_108() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3_107() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_93() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_91() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_89() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) return true;
    }
    return false;
  }

  static private boolean jj_3_106() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_105() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_104() {
    if (jj_scan_token(IFF)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_103() {
    if (jj_scan_token(IMPLIES)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_102() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_94() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_92() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_90() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_88() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_100() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    return false;
  }

  static private boolean jj_3_98() {
    if (jj_scan_token(GE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    return false;
  }

  static private boolean jj_3_96() {
    if (jj_scan_token(LE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3_89()) return true;
    }
    return false;
  }

  static private boolean jj_3_210() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_87() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_203() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_85() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_scan_token(F)) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(X)) return true;
    return false;
  }

  static private boolean jj_3_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_85()) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_209() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3_208() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3_207() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_206() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_206()) {
    jj_scanpos = xsp;
    if (jj_3_207()) {
    jj_scanpos = xsp;
    if (jj_3_208()) {
    jj_scanpos = xsp;
    if (jj_3_209()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) return true;
    }
    return false;
  }

  static private boolean jj_3_205() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3_204() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_204()) {
    jj_scanpos = xsp;
    if (jj_3_205()) return true;
    }
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(R)) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_scan_token(W)) return true;
    return false;
  }

  static private boolean jj_3_202() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(U)) return true;
    return false;
  }

  static private boolean jj_3_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_80()) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(REG_IDENTPRIME)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_198() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_201() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_201()) {
    jj_scanpos = xsp;
    if (jj_3_202()) {
    jj_scanpos = xsp;
    if (jj_3_203()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_195() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_197() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(REG_IDENT)) return true;
    return false;
  }

  static private boolean jj_3_193() {
    if (jj_scan_token(INIT)) return true;
    return false;
  }

  static private boolean jj_3_200() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_199() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3_196() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_194() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_192() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(FILTER)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_194()) {
    jj_scanpos = xsp;
    if (jj_3_195()) {
    jj_scanpos = xsp;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    if (jj_3_197()) {
    jj_scanpos = xsp;
    if (jj_3_198()) {
    jj_scanpos = xsp;
    if (jj_3_199()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    xsp = jj_scanpos;
    if (jj_3_200()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RENAME)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RENAME)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_191() {
    if (jj_scan_token(REG_IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(DQUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_192()) {
    jj_scanpos = xsp;
    if (jj_3_193()) return true;
    }
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    return false;
  }

  static private boolean jj_3_184() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_190() {
    if (jj_scan_token(REG_INT)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_190()) {
    jj_scanpos = xsp;
    if (jj_3_191()) return true;
    }
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_187() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3_188() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_188()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_189() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_189()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_186() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3_183() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) return true;
    }
    return false;
  }

  static private boolean jj_3_182() {
    if (jj_scan_token(DLBRACKET)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(DRBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_181() {
    if (jj_scan_token(DLT)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(DGT)) return true;
    return false;
  }

  static private boolean jj_3_172() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) return true;
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_170() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(A)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(E)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_176() {
    if (jj_scan_token(C)) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3_180() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_174() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_179() {
    if (jj_scan_token(I)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_171() {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3_178() {
    if (jj_scan_token(M)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_177() {
    if (jj_scan_token(C)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(C)) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_168() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_175() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(SYSTEM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    if (jj_scan_token(ENDSYSTEM)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3_175()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) {
    jj_scanpos = xsp;
    if (jj_3_179()) {
    jj_scanpos = xsp;
    if (jj_3_180()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_169() {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(INIT)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(ENDINIT)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_173() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3_172()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_170()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3_173()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(REWARDS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDREWARDS)) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_161() {
    if (jj_3R_64()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_159() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_160() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3_164() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_167() {
    if (jj_scan_token(RMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_163() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_166() {
    if (jj_scan_token(RMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_158() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_162() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_165() {
    if (jj_scan_token(R)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_161()) {
    jj_scanpos = xsp;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) {
    jj_scanpos = xsp;
    if (jj_3_164()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    if (jj_3_166()) {
    jj_scanpos = xsp;
    if (jj_3_167()) return true;
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_108()) return true;
    xsp = jj_scanpos;
    if (jj_3_168()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_155() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_157() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_155()) jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(S)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    if (jj_3_157()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    xsp = jj_scanpos;
    if (jj_3_158()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_151() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_154() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3_153() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3_152() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_153()) {
    jj_scanpos = xsp;
    if (jj_3_154()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(INVARIANT)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(ENDINVARIANT)) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDMODULE)) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(CLOCK)) return true;
    return false;
  }

  static private boolean jj_3_143() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_144() {
    if (jj_3R_64()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_147() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_146() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_145() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3_150() {
    if (jj_scan_token(PMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(DOTS)) return true;
    return false;
  }

  static private boolean jj_3_149() {
    if (jj_scan_token(PMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_148() {
    if (jj_scan_token(P)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_143()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_144()) {
    jj_scanpos = xsp;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) {
    jj_scanpos = xsp;
    if (jj_3_147()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_148()) {
    jj_scanpos = xsp;
    if (jj_3_149()) {
    jj_scanpos = xsp;
    if (jj_3_150()) return true;
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_41()) return true;
    xsp = jj_scanpos;
    if (jj_3_151()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(INIT)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_138() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PrismParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[210];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PrismParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PrismParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PrismParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PrismParser(PrismParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PrismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[93];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 93; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 210; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
            case 197: jj_3_198(); break;
            case 198: jj_3_199(); break;
            case 199: jj_3_200(); break;
            case 200: jj_3_201(); break;
            case 201: jj_3_202(); break;
            case 202: jj_3_203(); break;
            case 203: jj_3_204(); break;
            case 204: jj_3_205(); break;
            case 205: jj_3_206(); break;
            case 206: jj_3_207(); break;
            case 207: jj_3_208(); break;
            case 208: jj_3_209(); break;
            case 209: jj_3_210(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
