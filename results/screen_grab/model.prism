smg

const int n = 7;
global s: [0 .. (n+3)];    	// order: d, tau, phi
global p: [0 .. 1];

player defender
	[trap], [notrap]
endplayer

player attacker
	game, [dropout], [target]
endplayer

module game
	// defender actions
	[notrap] s<=n-1 & p=0 -> (p'=1);
	[trap] s=0 & p=0 -> 0.9271348506063114 : (s'=n+1) + 0.0728651493936886 : (p'=1);
	[trap] s=1 & p=0 -> 0.887811080985669 : (s'=n+1) + 0.11218891901433103 : (p'=1);
	[trap] s=2 & p=0 -> 0.9083668702766466 : (s'=n+1) + 0.09163312972335336 : (p'=1);
	[trap] s=3 & p=0 -> 0.9393375489237468 : (s'=n+1) + 0.06066245107625323 : (p'=1);
	[trap] s=4 & p=0 -> 0.9435451443426657 : (s'=n+1) + 0.056454855657334324 : (p'=1);
	[trap] s=5 & p=0 -> 0.8015706194993732 : (s'=n+1) + 0.19842938050062675 : (p'=1);
	[trap] s=6 & p=0 -> 0.9795734661752517 : (s'=n+1) + 0.02042653382474835 : (p'=1);

	// sink transitions
	[] s=n -> (s'=n+3);
	[] s=n+1 -> (s'=n+3);
	[] s=n+2 -> (s'=n+3);

	// attacker actions
	[dropout] s<=n-1 & p=1 -> (s'=n+2);
	[] (s=0) & p=1 -> (s'=1) & (p'=0);
	[] (s=1) & p=1 -> (s'=2) & (p'=0);
	[] (s=0 | s=1) & p=1 -> (s'=3) & (p'=0);
	[] (s=0 | s=2 | s=3) & p=1 -> (s'=4) & (p'=0);
	[] (s=0 | s=3) & p=1 -> (s'=5) & (p'=0);
	[target] (s=1 | s=2 | s=5) & p=1 -> (s'=n);
endmodule

rewards "targetreached"
	s=n : 1;
endrewards

rewards "trapped"
	s=n+1 : 1;
endrewards

rewards "cost"
	[trap] true: 1;
	[notrap] true: 0;
endrewards

